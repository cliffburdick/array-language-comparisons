
a = [1,2,3,4]
cumsum a

reduce 0 (+) a

-- def fold(init:a, body:(n,a)->a) -> a  given (n|Ix, a|Data) =
--   fst $ scan init \i x. (body(i, x), ())

-- `combine` should be a commutative and associative, and form a
-- commutative monoid with `identity`
-- def reduce(identity:a, combine:(a,a)->a, xs:n=>a) -> a given (a|Data, n|Ix) =
  -- TODO: implement with the accumulator effect
--  fold identity \i c. combine(c, xs[i])

-- def scan(init:a, body:(n, a)->(a,b)) -> (a, n=>b) given (a|Data, b, n|Ix) =
--   swap $ run_state(init) \s. for i.
--     c = get s
--     (c', y) = body(i, c)
--     s := c'
--     y

-- modified code from: https://github.com/google-research/dex-lang/issues/622
-- def scan_( body: (n, a) -> (a, b), init: a,           ) -> (a, n => b) given (a|Data, b, n|Ix) =
def jaxy_scan(body: (c, a) -> (c, b), init: c, xs: n => a) -> (c, n => b) given (a|Data, b, c|Data, n|Ix) =
  scan init \i carry. body carry xs[i]

def update_scan(cur_val: Nat, cur_carry: Nat) -> (Nat, Nat) =
    new_carry = cur_carry + cur_val
    (new_carry, new_carry) -- made a small change here

to_sum = [1, 1, 1]

scan_init = 0

jaxy_scan update_scan scan_init to_sum

-- Making a scan similar to Haskell and most other languages
def scanl(f: (a, a) -> a, init: a, xs: n => a) -> n => a given (a|Data, n|Ix) =
   scan' init \i acc. f(acc, xs[i])

scanl (+) 0 a
scanl (-) 0 (map n_to_i a)
